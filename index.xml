<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hello Friend NG</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/</link><description>Recent content on Hello Friend NG</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 17 Jun 2024 12:37:42 +0200</lastBuildDate><atom:link href="https://gogo2464.github.io/gogo-s-blog-cpe/index.xml" rel="self" type="application/rss+xml"/><item><title>exploit</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/exploit-dev/xxx/</link><pubDate>Mon, 17 Jun 2024 12:37:42 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/exploit-dev/xxx/</guid><description>1 Target</description></item><item><title>find player location in minecraft from picture</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/minecraft-speedrun/finding-player-location-on-minecraf-picture-geoint-methodo/</link><pubDate>Mon, 17 Jun 2024 12:37:42 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/minecraft-speedrun/finding-player-location-on-minecraf-picture-geoint-methodo/</guid><description>1 Project philosophy In some case, speedrunners could watch a &amp;ldquo;secret&amp;rdquo; location from a specific seed on youtube video. In this case, they will need to find it to redo the speedrun method. In this tutorial, I will help you to find a speedrun location from a picture.
This project is a geoint methodology (tutorial) to find the coordinate (x,y) from a picture. The project consist to:
1: find the seed of the picture 2: find coordinate from picture on the seed In this tutorial we will use math principles of triangulation (we use a compass on a map get the intersection of 2 points of a specific distance) and trigonometry (math on rectangle triangles).</description></item><item><title>Minecraft on Tor</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/putting-games-on-darknet/minecraft-on-tor/</link><pubDate>Mon, 17 Jun 2024 12:37:42 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/putting-games-on-darknet/minecraft-on-tor/</guid><description>Philosophy This is a project about to put a minecraft private server on TOR.
The Minecraft target has the advantages to:
Provide a private server that does not require to maintain code to work: Private servers only work once you have the private server code ready. Allow juridically to deploy a private server: Minecraft provide server binaries. It is then absolutely legal to publish such server. Still proprietary target to force the user to dissect the minecraft source code for future purpose: In the future we could write a private server based on p2p instead of TOR.</description></item><item><title>Episode 1 reverse engineering and exploitation of pokemon red and blue</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-1-reverse-engineering-and-exploitation-of-pokemon-red-and-blue/</link><pubDate>Fri, 05 Aug 2022 21:09:23 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-1-reverse-engineering-and-exploitation-of-pokemon-red-and-blue/</guid><description>Hello and welcome to my first post. As a first exercise, today we are going to dissect a stack buffer overflow worm present that exploits a vulnerabilty present on the video game pokemon red and blue on gameboy. We will use reverse engineering technics.
I choose to use gameboy because this architecture has no mitigation. It is a perfect example. Also the roms of gameboy are unpatchable. It is the definition of ROM: Read Only Memory.</description></item><item><title>Welcome</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-0-welcome/</link><pubDate>Thu, 04 Aug 2022 12:37:42 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-0-welcome/</guid><description>Hello and welcome to the book From 0 to buffer overflow. This book will teach you how to hack remotely a computer using memory corruption vulnerabilities.
You will learn computer science about reverse engineering (dissect obscure computers and programs), vulnerability exploitation (code to break existing programs and remotely take over a computer) and cryptanalysis (cryptanalysis is a branch of the mathenmatics made to attack cryptography. Cryptography is math about to defend information.</description></item><item><title/><link>https://gogo2464.github.io/gogo-s-blog-cpe/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/readme/</guid><description>test</description></item></channel></rss>