<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CPE</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/</link><description>Recent content on CPE</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sun, 13 Oct 2024 01:25:30 +0200</lastBuildDate><atom:link href="https://gogo2464.github.io/gogo-s-blog-cpe/index.xml" rel="self" type="application/rss+xml"/><item><title>Episode 1: introduction to cryptography</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-crypto-by-projects/episode-1-introduction/</link><pubDate>Sun, 13 Oct 2024 01:25:30 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-crypto-by-projects/episode-1-introduction/</guid><description>&lt;h3 id="approach">Approach&lt;/h3>
&lt;p>In cryptography, there are mathematics but in a very different way than school. Not because it sounds more concreet at all. But because it is about to break theorems (disproof).&lt;/p>
&lt;p>Contrary to memory error issues as any flaw in cyber security, you must have math theorem proving prerequisties.&lt;/p>
&lt;p>If you would like to seriously professionally work in cryptography, you mandatorely need to have these prerequisties.&lt;/p>
&lt;ul>
&lt;li>step 1: math to proove theorems:
&lt;ul>
&lt;li>1: &lt;a href="https://www.people.vcu.edu/~rhammack/BookOfProof/Main.pdf">book fo proof&lt;/a>&lt;/li>
&lt;li>2: or the book: &lt;a href="https://www.amazon.com/How-Prove-Structured-Daniel-Velleman/dp/1108439535/ref=sr_1_1?crid=1G289WGWAXA57&amp;keywords=how+to+prove+it&amp;qid=1685799138&amp;s=books&amp;sprefix=how+to+prov%2Cstripbooks-intl-ship%2C864&amp;sr=1-1">how to proove it&lt;/a> if you prefer. Be carefull: the second book is not free and corrections are only available by third party.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>step 2: theorem prooving focusing on cryptology &lt;a href="https://www.amazon.com/Introduction-Mathematical-Cryptography-Undergraduate-Mathematics/dp/1493939386">math focused:&lt;/a>&lt;/li>
&lt;li>step 3: &lt;a href="https://www.amazon.fr/Cryptanalysis-RSA-Variants-Jason-Hinek/dp/1420075187">congrat!!! because you are now able to read papers focusing on real life issues&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>But the most important remains to do! At thisu point you must have to fly on your own wing on subject that intrest you such as cryptocurencies or peer to peer security!!!&lt;/p></description></item><item><title>Episode 1: Introduction and Welcome</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-1-intro-welcome/</link><pubDate>Thu, 04 Aug 2022 12:37:42 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-1-intro-welcome/</guid><description>&lt;p>Hello and welcome to the book &lt;code>From 0 to buffer overflow&lt;/code>. This book will teach you how to hack remotely a computer using memory corruption vulnerabilities.&lt;/p>
&lt;p>You will learn computer science about reverse engineering (dissect obscure computers and programs), vulnerability exploitation (code to break existing programs and remotely take over a computer) and cryptanalysis (cryptanalysis is a branch of the mathenmatics made to attack cryptography. Cryptography is math about to defend information. Cryptanalysis is about to attack, to break! It is from far deeper than just using cryptography).&lt;/p></description></item><item><title>Episode 2: Reversing cryptography algorithm made to be unreversables (checksum). Method by mathematical proof: disproof</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-crypto-by-projects/episode-2-proof-demonstration/</link><pubDate>Sun, 13 Oct 2024 01:25:30 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-crypto-by-projects/episode-2-proof-demonstration/</guid><description>&lt;h2 id="i---identify">I - Identify&lt;/h2>
&lt;p>According to the documentation and as it is mentionned that type 7 is an hashing algorithm.&lt;/p>
&lt;p>A secure hash algorithm is an hash algorithm so that for any function hash that transform the original (plaintext) value $ hased = H(plain) $ there does not exist a function $ rev(hashed) $ so that $ rev(hashed) = plain $.&lt;/p>
&lt;h2 id="ii---notes">II - Notes:&lt;/h2>
&lt;p>I really definitely insist on this point: &lt;code>It is crucial for a cryptologist to PROOVE his statement. Not just calculating.&lt;/code> If you only calculate, you could reach some proprietary algorithms such as this one but you will never ever be able to code CVE exploits on modern algorithms. I insist in the point you have to read &lt;a href="https://www.people.vcu.edu/~rhammack/BookOfProof/Main.pdf">book fo proof&lt;/a> if you did not do it yet. It is to do theorem proving.&lt;/p></description></item><item><title>Episode 2: guessing source-code (reverse engineering) of an cryptographic algorithm to break it</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-2-guessing-source-code-reverse-engineering-program/</link><pubDate>Sat, 12 Oct 2024 23:00:00 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-2-guessing-source-code-reverse-engineering-program/</guid><description>&lt;h3 id="reverse-engineeringdecompilation-mathematical-analysis-and-exploitation-of-vigenere-cisco-algorithm">reverse engineering/decompilation, mathematical analysis, and exploitation of Vigenere Cisco algorithm&lt;/h3>
&lt;h2 id="identify">Identify:&lt;/h2>
&lt;p>In this course we are going to learn what to do when we do not have the source code of a program but when we need to still read the source code in order to find vulnerabilities that the developpers have let.&lt;/p>
&lt;p>You will have to use this code reading technic (reverse engineering) to audit a proprietary hashing algorithm known as &amp;ldquo;Vigenere Cisco&amp;rdquo;.&lt;/p></description></item><item><title>Episode 3: exploitation of pokemon red and blue</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-3-exploitation-of-pokemon-red-and-blueno_dep-no_aslr-no_canary-no_pie/</link><pubDate>Fri, 05 Aug 2022 21:09:23 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-3-exploitation-of-pokemon-red-and-blueno_dep-no_aslr-no_canary-no_pie/</guid><description>&lt;h2 id="identify">Identify&lt;/h2>
&lt;p>Hello and welcome to my second post. As a first exercise, today we are going to dissect a stack buffer overflow worm present that exploits a vulnerabilty present on the video game pokemon red and blue on gameboy. We will use reverse engineering technics.&lt;/p>
&lt;p>I choose to use gameboy because this architecture has no mitigation. It is a perfect example. Also the roms of gameboy are unpatchable. It is the definition of ROM: Read Only Memory. Then we could have friend with consentent friend to play with them and show them the exploit.&lt;/p></description></item><item><title>Minecraft on Tor</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/putting-games-on-darknet/minecraft-on-tor/</link><pubDate>Mon, 17 Jun 2024 12:37:42 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/putting-games-on-darknet/minecraft-on-tor/</guid><description>&lt;h1 id="philosophy">Philosophy&lt;/h1>
&lt;p>This is a project about to put a minecraft private server on TOR.&lt;/p>
&lt;p>The Minecraft target has the advantages to:&lt;/p>
&lt;ul>
&lt;li>Provide a private server that does not require to maintain code to work: Private servers only work once you have the private server code ready.&lt;/li>
&lt;li>Allow juridically to deploy a private server: Minecraft provide server binaries. It is then absolutely legal to publish such server.&lt;/li>
&lt;li>Still proprietary target to force the user to dissect the minecraft source code for future purpose: In the future we could write a private server based on p2p instead of TOR.&lt;/li>
&lt;li>Tor can be relatively fast for a darknet. Could still be better for card game or less memory intensive games.&lt;/li>
&lt;/ul>
&lt;h1 id="i--deploy-on-a-debian-12-minecraft-server">I / Deploy On A debian 12 Minecraft Server&lt;/h1>
&lt;p>We are going to run a Minecraft server right now. First, enable TOR server:&lt;/p></description></item><item><title/><link>https://gogo2464.github.io/gogo-s-blog-cpe/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/readme/</guid><description>&lt;p>&lt;em>&lt;strong>test&lt;/strong>&lt;/em>&lt;/p></description></item></channel></rss>