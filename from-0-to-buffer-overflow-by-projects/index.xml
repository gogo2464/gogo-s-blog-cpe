<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>From-0-to-Buffer-Overflow-by-Projects on Hello Friend NG</title><link>https://gogo2464.github.io/cpe-gogo-s-blog/from-0-to-buffer-overflow-by-projects/</link><description>Recent content in From-0-to-Buffer-Overflow-by-Projects on Hello Friend NG</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 05 Aug 2022 21:09:23 +0200</lastBuildDate><atom:link href="https://gogo2464.github.io/cpe-gogo-s-blog/from-0-to-buffer-overflow-by-projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Episode 1 reverse engineering and exploitation of pokemon red and blue</title><link>https://gogo2464.github.io/cpe-gogo-s-blog/from-0-to-buffer-overflow-by-projects/episode-1-reverse-engineering-and-exploitation-of-pokemon-red-and-blue/</link><pubDate>Fri, 05 Aug 2022 21:09:23 +0200</pubDate><guid>https://gogo2464.github.io/cpe-gogo-s-blog/from-0-to-buffer-overflow-by-projects/episode-1-reverse-engineering-and-exploitation-of-pokemon-red-and-blue/</guid><description>Hello and welcome to my first post. As a first exercise, today we are going to dissect a stack buffer overflow worm present that exploits a vulnerabilty present on the video game pokemon red and blue on gameboy. We will use reverse engineering technics.
I choose to use gameboy because this architecture has no mitigation. It is a perfect example. Also the roms of gameboy are unpatchable. It is the definition of ROM: Read Only Memory.</description></item><item><title>Welcome</title><link>https://gogo2464.github.io/cpe-gogo-s-blog/from-0-to-buffer-overflow-by-projects/episode-0-welcome/</link><pubDate>Thu, 04 Aug 2022 12:37:42 +0200</pubDate><guid>https://gogo2464.github.io/cpe-gogo-s-blog/from-0-to-buffer-overflow-by-projects/episode-0-welcome/</guid><description>Hello and welcome to the book From 0 to buffer overflow. This book will teach you how to hack remotely a computer using memory corruption vulnerabilities.
You will learn computer science about reverse engineering (dissect obscure computers and programs), vulnerability exploitation (code to break existing programs and remotely take over a computer) and cryptanalysis (cryptanalysis is a branch of the mathenmatics made to attack cryptography. Cryptography is math about to defend information.</description></item></channel></rss>