<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>From-0-to-Buffer-Overflow-by-Projects on CPE</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/</link><description>Recent content in From-0-to-Buffer-Overflow-by-Projects on CPE</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sat, 12 Oct 2024 23:00:00 +0200</lastBuildDate><atom:link href="https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Episode 1: Introduction and Welcome</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-1-intro-welcome/</link><pubDate>Thu, 04 Aug 2022 12:37:42 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-1-intro-welcome/</guid><description>&lt;p>Hello and welcome to the book &lt;code>From 0 to buffer overflow&lt;/code>. This book will teach you how to hack remotely a computer using memory corruption vulnerabilities.&lt;/p>
&lt;p>You will learn computer science about reverse engineering (dissect obscure computers and programs), vulnerability exploitation (code to break existing programs and remotely take over a computer) and cryptanalysis (cryptanalysis is a branch of the mathenmatics made to attack cryptography. Cryptography is math about to defend information. Cryptanalysis is about to attack, to break! It is from far deeper than just using cryptography).&lt;/p></description></item><item><title>Episode 2: guessing source-code (reverse engineering) of an cryptographic algorithm to break it</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-2-reverse-engineering-and-mathematical-audit-of-vigenere-ciscoreverse-engineering/</link><pubDate>Sat, 12 Oct 2024 23:00:00 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-2-reverse-engineering-and-mathematical-audit-of-vigenere-ciscoreverse-engineering/</guid><description>&lt;h3 id="reverse-engineeringdecompilation-mathematical-analysis-and-exploitation-of-vigenere-cisco-algorithm">reverse engineering/decompilation, mathematical analysis, and exploitation of Vigenere Cisco algorithm&lt;/h3>
&lt;h2 id="introduction-and-goals">Introduction and goals:&lt;/h2>
&lt;p>In this course we are going to learn what to do when we do not have the source code of a program but when we need to still read the source code in order to find vulnerabilities that the developpers have let.&lt;/p>
&lt;p>You will have to use this code reading technic (reverse engineering) to audit a proprietary hashing algoritgh known as &amp;ldquo;Vigenere Cisco&amp;rdquo;.&lt;/p></description></item><item><title>Episode 3: exploitation of pokemon red and blue</title><link>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-3-exploitation-of-pokemon-red-and-blueno_dep-no_aslr-no_canary-no_pie/</link><pubDate>Fri, 05 Aug 2022 21:09:23 +0200</pubDate><guid>https://gogo2464.github.io/gogo-s-blog-cpe/from-0-to-buffer-overflow-by-projects/episode-3-exploitation-of-pokemon-red-and-blueno_dep-no_aslr-no_canary-no_pie/</guid><description>&lt;p>Hello and welcome to my second post. As a first exercise, today we are going to dissect a stack buffer overflow worm present that exploits a vulnerabilty present on the video game pokemon red and blue on gameboy. We will use reverse engineering technics.&lt;/p>
&lt;p>I choose to use gameboy because this architecture has no mitigation. It is a perfect example. Also the roms of gameboy are unpatchable. It is the definition of ROM: Read Only Memory. Then we could have friend with consentent friend to play with them and show them the exploit.&lt;/p></description></item></channel></rss>